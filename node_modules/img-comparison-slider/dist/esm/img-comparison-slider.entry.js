import { r as registerInstance, h, g as getElement } from './chunk-48aeaa03.js';

const inBetween = (actual, min, max) => {
    if (actual < min) {
        return min;
    }
    if (actual > max) {
        return max;
    }
    return actual;
};
const KeySlideOffset = {
    'ArrowLeft': -1,
    'ArrowRight': 1,
};
class ImgComparisonSlider {
    constructor(hostRef) {
        registerInstance(this, hostRef);
        this.exposure = 50;
        this.isMouseDown = false;
    }
    componentWillLoad() {
        this.el.querySelectorAll('img').forEach(img => {
            img.addEventListener('dragstart', (e) => {
                e.preventDefault();
            });
        });
    }
    componentDidRender() {
        this.slide(0);
        this.updateAfterWidth();
        this.el.setAttribute('tabindex', '0');
    }
    componentDidUnload() {
        if (this.transitionTimer) {
            window.clearTimeout(this.transitionTimer);
        }
    }
    slide(increment = 0, transition = false) {
        this.exposure = inBetween(this.exposure + increment, 0, 100);
        if (transition) {
            const transitionTime = 100;
            this.after.style.transition = `width ${transitionTime}ms`;
            this.transitionTimer = window.setTimeout(() => {
                this.after.style.transition = null;
                this.transitionTimer = null;
            }, transitionTime);
        }
        this.after.style.width = `${this.exposure}%`;
    }
    onKeyDown(e) {
        if (this.keyboardSlideAnimationTimeoutId) {
            return;
        }
        const key = e.key;
        if (!Object.keys(KeySlideOffset).includes(key)) {
            return;
        }
        this.startSlideAnimation(KeySlideOffset[key]);
    }
    onKeyUp(e) {
        if (!this.keyboardSlideAnimationTimeoutId) {
            return;
        }
        if (!Object.keys(KeySlideOffset).includes(e.key)) {
            return;
        }
        this.stopSlideAnimation();
    }
    onMouseDown(e) {
        this.isMouseDown = true;
        this.slideToEvent(e, true);
        this.el.focus();
    }
    onMouseUp(e) {
        this.isMouseDown = false;
    }
    onMouseMove(e) {
        if (this.isMouseDown) {
            this.slideToEvent(e);
        }
    }
    onBlur() {
        this.stopSlideAnimation();
    }
    updateAfterWidth() {
        this.imageWidth = this.el.offsetWidth;
        this.afterImageContainer.style.width = `${this.el.offsetWidth}px`;
    }
    slideToEvent(e, transition = false) {
        const x = e.pageX - this.el.offsetLeft;
        this.exposure = (x / this.imageWidth) * 100;
        this.slide(0, transition);
    }
    startSlideAnimation(offset) {
        const fps = 120;
        const fraction = 1 * offset;
        const slide = () => {
            this.keyboardSlideAnimationTimeoutId = window.setTimeout(() => {
                this.animationRequestId = window.requestAnimationFrame(slide);
            }, 1000 / fps);
            this.slide(fraction);
        };
        slide();
    }
    stopSlideAnimation() {
        if (!this.keyboardSlideAnimationTimeoutId) {
            return;
        }
        window.clearTimeout(this.keyboardSlideAnimationTimeoutId);
        window.cancelAnimationFrame(this.animationRequestId);
        this.keyboardSlideAnimationTimeoutId = null;
        this.animationRequestId = null;
    }
    render() {
        return h("div", null, h("div", { ref: el => this.before = el }, h("slot", { name: "before" })), h("div", { class: "after", ref: el => this.after = el }, h("div", { class: "hint" }), h("div", { class: "after-overlay" }, h("div", { ref: el => this.afterImageContainer = el }, h("slot", { name: "after" })))));
    }
    get el() { return getElement(this); }
    static get style() { return ":host{--divider:1px solid #d7d7d7;--hint-size:40px;--hint-color:#d7d7d7;--hint-opacity:0.5;--hint-opacity-active:0;position:relative;display:inline-block;font-size:0;overflow:hidden}:host(:focus) .hint{opacity:0}::slotted(img){-webkit-user-drag:none;-khtml-user-drag:none;-moz-user-drag:none;-o-user-drag:none;user-drag:none;-webkit-touch-callout:none;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.component:hover .hint{opacity:var(--hint-opacity-active)}.after{position:absolute;left:0;top:0;bottom:0;border-right:var(--divider)}.after .after-overlay{overflow:hidden}.hint{position:absolute;width:var(--hint-size);height:var(--hint-size);background-color:var(--hint-color);top:50%;right:0;margin-top:calc(var(--hint-size) / (-2));margin-right:calc(var(--hint-size) / (-2));-webkit-transition:opacity 1s,-webkit-transform 1s;transition:opacity 1s,-webkit-transform 1s;transition:opacity 1s,transform 1s;transition:opacity 1s,transform 1s,-webkit-transform 1s;-webkit-box-sizing:border-box;box-sizing:border-box;-webkit-box-shadow:0 0 15px 0 rgba(0,0,0,.75);box-shadow:0 0 15px 0 rgba(0,0,0,.75);pointer-events:none;opacity:var(--hint-opacity);-webkit-transform:rotate(45deg);transform:rotate(45deg)}.focused .hint{-webkit-transform:rotate(45deg) scale(1.5);transform:rotate(45deg) scale(1.5)}"; }
}

export { ImgComparisonSlider as img_comparison_slider };
